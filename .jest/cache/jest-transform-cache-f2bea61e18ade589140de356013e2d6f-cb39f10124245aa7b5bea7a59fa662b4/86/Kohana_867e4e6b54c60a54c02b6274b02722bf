ed2d177290b020f5dd0b1d010ad442af
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");









var _BaseInput = _interopRequireDefault(require("./BaseInput"));var _jsxFileName = "C:\\Users\\BESSY\\Documents\\triviaApp\\node_modules\\react-native-textinput-effects\\lib\\Kohana.js";function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}

var PADDING = 16;var

Kohana = function (_BaseInput) {_inherits(Kohana, _BaseInput);function Kohana() {_classCallCheck(this, Kohana);return _possibleConstructorReturn(this, _getPrototypeOf(Kohana).apply(this, arguments));}_createClass(Kohana, [{ key: "render", value: function render()



























    {var _this$props =









      this.props,Icon = _this$props.iconClass,iconColor = _this$props.iconColor,iconSize = _this$props.iconSize,iconName = _this$props.iconName,label = _this$props.label,containerStyle = _this$props.style,inputStyle = _this$props.inputStyle,labelStyle = _this$props.labelStyle;var _this$state =
      this.state,focusedAnim = _this$state.focusedAnim,value = _this$state.value;

      return (
        _react.default.createElement(_reactNative.View, {
          style: [styles.container, containerStyle],
          onLayout: this._onLayout, __source: { fileName: _jsxFileName, lineNumber: 59 } },

        _react.default.createElement(_reactNative.TouchableWithoutFeedback, { onPress: this.focus, __source: { fileName: _jsxFileName, lineNumber: 63 } },
        _react.default.createElement(_reactNative.Animated.View, {
          style: {
            justifyContent: 'center',
            padding: PADDING,
            transform: [
            {
              translateX: focusedAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [-15 - iconSize, 0] }) }] }, __source: { fileName: _jsxFileName, lineNumber: 64 } },





        _react.default.createElement(Icon, { name: iconName, color: iconColor, size: iconSize, __source: { fileName: _jsxFileName, lineNumber: 78 } }))),


        _react.default.createElement(_reactNative.TouchableWithoutFeedback, { onPress: this.focus, __source: { fileName: _jsxFileName, lineNumber: 81 } },
        _react.default.createElement(_reactNative.Animated.View, {
          style: {
            position: 'absolute',
            top: PADDING,
            left: 0,
            transform: [
            {
              translateX: focusedAnim.interpolate({
                inputRange: [0, 1],
                outputRange: [PADDING, 80] }) }],



            opacity: focusedAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [1, 0] }) }, __source: { fileName: _jsxFileName, lineNumber: 82 } },



        _react.default.createElement(_reactNative.Text, { style: [styles.label, labelStyle], __source: { fileName: _jsxFileName, lineNumber: 101 } },
        label))),



        _react.default.createElement(_reactNative.TextInput, _extends({
          ref: "input" },
        this.props, {
          style: [styles.textInput, inputStyle],
          value: value,
          onBlur: this._onBlur,
          onFocus: this._onFocus,
          onChange: this._onChange,
          underlineColorAndroid: 'transparent', __source: { fileName: _jsxFileName, lineNumber: 106 } }))));



    } }]);return Kohana;}(_BaseInput.default);exports.default = Kohana;Kohana.propTypes = { iconClass: _propTypes.default.func.isRequired, iconName: _propTypes.default.string.isRequired, iconColor: _propTypes.default.string, iconSize: _propTypes.default.number };Kohana.defaultProps = { easing: _reactNative.Easing.bezier(0.2, 1, 0.3, 1), iconSize: 25, useNativeDriver: false };


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: 'white',
    overflow: 'hidden' },

  label: {
    fontSize: 18,
    fontFamily: 'Arial',
    fontWeight: 'bold',
    color: '#D2D2D2' },

  textInput: {
    flex: 1,
    paddingHorizontal: PADDING,
    paddingVertical: 0,
    color: 'black',
    fontSize: 18 } });