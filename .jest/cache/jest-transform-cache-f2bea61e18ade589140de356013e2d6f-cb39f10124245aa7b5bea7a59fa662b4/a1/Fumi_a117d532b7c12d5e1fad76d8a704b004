aa9115d992b0dfab3bc46cc48b1d1f0c
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");







var _BaseInput = _interopRequireDefault(require("./BaseInput"));var _jsxFileName = "C:\\Users\\BESSY\\Documents\\triviaApp\\node_modules\\react-native-textinput-effects\\lib\\Fumi.js";function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}

var PADDING = 16;
var ICON_WIDTH = 40;var

Fumi = function (_BaseInput) {_inherits(Fumi, _BaseInput);function Fumi() {_classCallCheck(this, Fumi);return _possibleConstructorReturn(this, _getPrototypeOf(Fumi).apply(this, arguments));}_createClass(Fumi, [{ key: "render", value: function render()

































    {var _this$props =











      this.props,iconClass = _this$props.iconClass,iconColor = _this$props.iconColor,iconSize = _this$props.iconSize,passiveIconColor = _this$props.passiveIconColor,iconName = _this$props.iconName,label = _this$props.label,containerStyle = _this$props.style,inputStyle = _this$props.inputStyle,inputHeight = _this$props.height,labelStyle = _this$props.labelStyle;var _this$state =
      this.state,focusedAnim = _this$state.focusedAnim,value = _this$state.value;
      var AnimatedIcon = _reactNative.Animated.createAnimatedComponent(iconClass);
      var ANIM_PATH = PADDING + inputHeight;
      var NEGATIVE_ANIM_PATH = ANIM_PATH * -1;

      return (
        _react.default.createElement(_reactNative.View, {
          style: [styles.container, containerStyle],
          onLayout: this._onLayout, __source: { fileName: _jsxFileName, lineNumber: 69 } },

        _react.default.createElement(_reactNative.TouchableWithoutFeedback, { onPress: this.focus, __source: { fileName: _jsxFileName, lineNumber: 73 } },
        _react.default.createElement(AnimatedIcon, {
          name: iconName,
          color: iconColor,
          size: iconSize,
          style: {
            position: 'absolute',
            left: PADDING,
            bottom: focusedAnim.interpolate({
              inputRange: [0, 0.5, 0.51, 0.7, 1],
              outputRange: [
              24,
              ANIM_PATH,
              NEGATIVE_ANIM_PATH,
              NEGATIVE_ANIM_PATH,
              24] }),


            color: focusedAnim.interpolate({
              inputRange: [0, 0.5, 1],
              outputRange: [passiveIconColor, iconColor, iconColor] }) }, __source: { fileName: _jsxFileName, lineNumber: 74 } })),




        _react.default.createElement(_reactNative.View, {
          style: [
          styles.separator,
          {
            height: inputHeight,
            left: ICON_WIDTH + 8 }], __source: { fileName: _jsxFileName, lineNumber: 98 } }),



        _react.default.createElement(_reactNative.TouchableWithoutFeedback, { onPress: this.focus, __source: { fileName: _jsxFileName, lineNumber: 107 } },
        _react.default.createElement(_reactNative.Animated.View, {
          style: {
            position: 'absolute',
            left: ICON_WIDTH + PADDING,
            height: inputHeight,
            top: focusedAnim.interpolate({
              inputRange: [0, 0.5, 0.51, 0.7, 1],
              outputRange: [
              24,
              ANIM_PATH,
              NEGATIVE_ANIM_PATH,
              NEGATIVE_ANIM_PATH,
              PADDING / 2] }) }, __source: { fileName: _jsxFileName, lineNumber: 108 } },




        _react.default.createElement(_reactNative.Animated.Text, {
          style: [
          styles.label,
          {
            fontSize: focusedAnim.interpolate({
              inputRange: [0, 0.7, 0.71, 1],
              outputRange: [16, 16, 12, 12] }),

            color: focusedAnim.interpolate({
              inputRange: [0, 0.7],
              outputRange: ['#696969', '#a3a3a3'] }) },


          labelStyle], __source: { fileName: _jsxFileName, lineNumber: 125 } },


        label))),



        _react.default.createElement(_reactNative.TextInput, _extends({
          ref: "input" },
        this.props, {
          style: [
          styles.textInput,
          {
            marginLeft: ICON_WIDTH + PADDING,
            color: iconColor },

          inputStyle],

          value: value,
          onBlur: this._onBlur,
          onFocus: this._onFocus,
          onChange: this._onChange,
          underlineColorAndroid: 'transparent', __source: { fileName: _jsxFileName, lineNumber: 145 } }))));



    } }]);return Fumi;}(_BaseInput.default);exports.default = Fumi;Fumi.propTypes = { iconClass: _propTypes.default.func.isRequired, iconName: _propTypes.default.string.isRequired, iconColor: _propTypes.default.string, iconSize: _propTypes.default.number, passiveIconColor: _propTypes.default.string, height: _propTypes.default.number };Fumi.defaultProps = { height: 48, iconColor: '#00aeef', iconSize: 20, passiveIconColor: '#a3a3a3', animationDuration: 300 };


var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: 'hidden',
    paddingTop: 16,
    backgroundColor: 'white' },

  label: {
    fontSize: 18,
    fontFamily: 'Arial',
    fontWeight: 'bold' },

  textInput: {
    flex: 1,
    color: 'black',
    fontSize: 18,
    padding: 7,
    paddingLeft: 0 },

  separator: {
    position: 'absolute',
    width: 1,
    backgroundColor: '#f0f0f0',
    top: 8 } });