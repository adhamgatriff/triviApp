33171426b974c1a36a53d82538c9ce97
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = createToolbarAndroidComponent;
var _isEqual = _interopRequireDefault(require("lodash/isEqual"));
var _pick = _interopRequireDefault(require("lodash/pick"));
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("./react-native");var _jsxFileName = "C:\\Users\\BESSY\\Documents\\triviaApp\\node_modules\\react-native-vector-icons\\lib\\toolbar-android.js";function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};if (desc.get || desc.set) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}

var ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];
var LOGO_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['logoName']);
var NAV_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['navIconName']);
var OVERFLOW_ICON_PROP_NAMES = ICON_PROP_NAMES.concat(['overflowIconName']);
var ACTIONS_PROP_NAMES = ICON_PROP_NAMES.concat(['actions']);

var arePropsEqual = function arePropsEqual(keys) {return function (prevProps, nextProps) {return (
      (0, _isEqual.default)((0, _pick.default)(prevProps, keys), (0, _pick.default)(nextProps, keys)));};};

var areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);
var areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);
var areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);
var areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);

function createToolbarAndroidComponent(
IconNamePropType,
getImageSource)
{var _class, _temp;
  return _temp = _class = function (_PureComponent) {_inherits(IconToolbarAndroid, _PureComponent);function IconToolbarAndroid() {var _getPrototypeOf2;var _this;_classCallCheck(this, IconToolbarAndroid);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}_this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));_this.























      state = {
        logo: undefined,
        navIcon: undefined,
        overflowIcon: undefined,
        actions: undefined };return _this;}_createClass(IconToolbarAndroid, [{ key: "componentDidMount", value: function componentDidMount()


      {
        this.updateLogoIconSource();
        this.updateNavIconSource();
        this.updateOverflowIconSource();
        this.updateActionIconSources();
      } }, { key: "componentDidUpdate", value: function componentDidUpdate(

      prevProps) {
        if (!areLogoIconPropsEqual(prevProps, this.props)) {
          this.updateLogoIconSource();
        }
        if (!areNavIconPropsEqual(prevProps, this.props)) {
          this.updateNavIconSource();
        }
        if (!areOverflowIconPropsEqual(prevProps, this.props)) {
          this.updateOverflowIconSource();
        }
        if (!areActionPropsEqual(prevProps, this.props)) {
          this.updateActionIconSources();
        }
      } }, { key: "updateLogoIconSource", value: function updateLogoIconSource() {var _this$props, logoName, iconSize, iconColor, titleColor, logo;return regeneratorRuntime.async(function updateLogoIconSource$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_this$props =


                this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;if (!
                logoName) {_context.next = 8;break;}_context.next = 4;return regeneratorRuntime.awrap(
                getImageSource(
                logoName,
                iconSize,
                iconColor || titleColor));case 4:logo = _context.sent;

                this.setState({ logo: logo });_context.next = 9;break;case 8:

                if (this.state.logo) {
                  this.setState({ logo: undefined });
                }case 9:case "end":return _context.stop();}}}, null, this);} }, { key: "updateNavIconSource", value: function updateNavIconSource() {var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;return regeneratorRuntime.async(function updateNavIconSource$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_this$props2 =



                this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;if (!
                navIconName) {_context2.next = 8;break;}_context2.next = 4;return regeneratorRuntime.awrap(
                getImageSource(
                navIconName,
                iconSize,
                iconColor || titleColor));case 4:navIcon = _context2.sent;

                this.setState({ navIcon: navIcon });_context2.next = 9;break;case 8:

                if (this.state.navIcon) {
                  this.setState({ navIcon: undefined });
                }case 9:case "end":return _context2.stop();}}}, null, this);} }, { key: "updateOverflowIconSource", value: function updateOverflowIconSource() {var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;return regeneratorRuntime.async(function updateOverflowIconSource$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_this$props3 =



                this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;if (!
                overflowIconName) {_context3.next = 8;break;}_context3.next = 4;return regeneratorRuntime.awrap(
                getImageSource(
                overflowIconName,
                iconSize,
                iconColor || titleColor));case 4:overflowIcon = _context3.sent;

                this.setState({ overflowIcon: overflowIcon });_context3.next = 9;break;case 8:

                if (this.state.overflowIcon) {
                  this.setState({ overflowIcon: undefined });
                }case 9:case "end":return _context3.stop();}}}, null, this);} }, { key: "updateActionIconSources", value: function updateActionIconSources() {var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;return regeneratorRuntime.async(function updateActionIconSources$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_this$props4 =



                this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;_context4.next = 3;return regeneratorRuntime.awrap(
                Promise.all(
                (actions || []).map(function (action) {
                  if (action.iconName) {
                    return getImageSource(
                    action.iconName,
                    action.iconSize || iconSize,
                    action.iconColor || iconColor || titleColor).
                    then(function (icon) {return _objectSpread({}, action, { icon: icon });});
                  }
                  return Promise.resolve(action);
                })));case 3:updatedActions = _context4.sent;

                this.setState({ actions: updatedActions });case 5:case "end":return _context4.stop();}}}, null, this);} }, { key: "render", value: function render()


      {
        return _react.default.createElement(_reactNative.ToolbarAndroid, _extends({}, this.props, this.state, { __source: { fileName: _jsxFileName, lineNumber: 142 } }));
      } }]);return IconToolbarAndroid;}(_react.PureComponent), _class.propTypes = { logoName: IconNamePropType, navIconName: IconNamePropType, overflowIconName: IconNamePropType, actions: _propTypes.default.arrayOf(_propTypes.default.shape({ title: _propTypes.default.string.isRequired, iconName: IconNamePropType, iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']), showWithText: _propTypes.default.bool })), iconSize: _propTypes.default.number, iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]), titleColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]) }, _class.defaultProps = { iconSize: 24 }, _temp;

}