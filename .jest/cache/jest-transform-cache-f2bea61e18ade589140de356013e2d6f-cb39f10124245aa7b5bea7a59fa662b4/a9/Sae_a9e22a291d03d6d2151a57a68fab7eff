0aef711804b339ab9e6f56759c96919b
"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _reactNative = require("react-native");







var _BaseInput = _interopRequireDefault(require("./BaseInput"));var _jsxFileName = "C:\\Users\\BESSY\\Documents\\triviaApp\\node_modules\\react-native-textinput-effects\\lib\\Sae.js";function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}

var LABEL_HEIGHT = 24;
var PADDING = 16;var

Sae = function (_BaseInput) {_inherits(Sae, _BaseInput);function Sae() {_classCallCheck(this, Sae);return _possibleConstructorReturn(this, _getPrototypeOf(Sae).apply(this, arguments));}_createClass(Sae, [{ key: "render", value: function render()


























    {var _this$props =









      this.props,iconClass = _this$props.iconClass,iconColor = _this$props.iconColor,iconName = _this$props.iconName,label = _this$props.label,containerStyle = _this$props.style,inputHeight = _this$props.height,inputStyle = _this$props.inputStyle,labelStyle = _this$props.labelStyle;var _this$state =
      this.state,width = _this$state.width,focusedAnim = _this$state.focusedAnim,value = _this$state.value;
      var AnimatedIcon = _reactNative.Animated.createAnimatedComponent(iconClass);

      return (
        _react.default.createElement(_reactNative.View, {
          style: [
          styles.container,
          containerStyle,
          {
            height: inputHeight + PADDING }],


          onLayout: this._onLayout, __source: { fileName: _jsxFileName, lineNumber: 58 } },

        _react.default.createElement(_reactNative.TouchableWithoutFeedback, { onPress: this.focus, __source: { fileName: _jsxFileName, lineNumber: 68 } },
        _react.default.createElement(_reactNative.Animated.View, {
          style: {
            position: 'absolute',
            bottom: focusedAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [0, LABEL_HEIGHT + PADDING] }) }, __source: { fileName: _jsxFileName, lineNumber: 69 } },



        _react.default.createElement(_reactNative.Animated.Text, {
          style: [
          styles.label,
          labelStyle,
          {
            fontSize: focusedAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [18, 12] }) }], __source: { fileName: _jsxFileName, lineNumber: 78 } },




        label))),



        _react.default.createElement(_reactNative.TextInput, _extends({
          ref: "input" },
        this.props, {
          style: [
          styles.textInput,
          inputStyle,
          {
            width: width,
            height: inputHeight }],


          value: value,
          onBlur: this._onBlur,
          onChange: this._onChange,
          onFocus: this._onFocus,
          underlineColorAndroid: 'transparent', __source: { fileName: _jsxFileName, lineNumber: 94 } })),

        _react.default.createElement(_reactNative.TouchableWithoutFeedback, { onPress: this.focus, __source: { fileName: _jsxFileName, lineNumber: 111 } },
        _react.default.createElement(AnimatedIcon, {
          name: iconName,
          color: iconColor,
          style: {
            position: 'absolute',
            bottom: 0,
            right: focusedAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [0, width + PADDING] }),

            transform: [
            {
              rotate: focusedAnim.interpolate({
                inputRange: [0, 1],
                outputRange: ['0deg', '-90deg'] }) }],



            fontSize: 20,
            backgroundColor: 'transparent' }, __source: { fileName: _jsxFileName, lineNumber: 112 } })),




        _react.default.createElement(_reactNative.Animated.View, {
          style: {
            position: 'absolute',
            bottom: 0,
            right: 0,
            height: 2,
            width: focusedAnim.interpolate({
              inputRange: [0, 1],
              outputRange: [0, width] }),

            backgroundColor: iconColor }, __source: { fileName: _jsxFileName, lineNumber: 136 } })));




    } }]);return Sae;}(_BaseInput.default);exports.default = Sae;Sae.propTypes = { height: _propTypes.default.number, iconClass: _propTypes.default.func.isRequired, iconName: _propTypes.default.string, iconColor: _propTypes.default.string };Sae.defaultProps = { iconColor: 'white', height: 48, animationDuration: 300, iconName: 'pencil' };


var styles = _reactNative.StyleSheet.create({
  container: {
    overflow: 'hidden' },

  label: {
    backgroundColor: 'transparent',
    fontFamily: 'Arial',
    fontWeight: 'bold',
    color: '#7771ab' },

  textInput: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    paddingTop: PADDING / 2,
    paddingLeft: 0,
    color: 'white',
    fontSize: 18 } });